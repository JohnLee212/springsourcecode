<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 让Spring管理 Student bean   -->
    <bean id="student" class="com.study.Student">
        <property name="name" value="小明"></property>
        <property name="homework" ref="homework"></property>
    </bean>

    <!-- 让Spring管理Homework bean-->
    <bean id="homework" class="com.study.Homework">
        <property name="content" value="how to calc 3+2 ?"></property>
    </bean>

    <bean id="userControllerId" class="com.study.controller.UserController"></bean>
    <bean id="userServiceId" class="com.study.service.impl.UserServiceImpl"></bean>

    <!--<bean id="BookServiceId" class="com.study.service.impl.BookServiceImpl">
        <property name="bookDao" ref="bookDaoId"></property>
    </bean>-->
    <bean id="BookServiceId" class="com.study.service.impl.BookServiceImpl">
        <constructor-arg ref="bookDaoId"/>
    </bean>
    <bean id="bookDaoId" class="com.study.dao.impl.BookDaoImpl"></bean>

    <bean id="exampleInitBean1" class="com.study.example.ExampleBean" init-method="init" destroy-method="destroy"/>
    <bean id="exampleInitBean2" class="com.study.example.AnotherExampleBean" destroy-method="cleanup"/>

    <bean class="com.study.example.CustomBeanPostProcessor1"/>
    <bean class="com.study.example.CustomBeanPostProcessor2"/>

<!--    <bean id="accountService" class="com.study.service.impl.AccountServiceImpl"/>-->
    <bean id="accountAdvice" class="com.study.advice.AccountAdvice"/>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="accountAdvice">
            <aop:pointcut id="myPointCut" expression="execution(* com.study.service.impl.AccountServiceImpl.*(..))"/>
            <!--环绕增强-->
            <aop:around method="myAround" pointcut-ref="myPointCut"/>
        </aop:aspect>
    </aop:config>
    <!--注解扫描-->
    <context:component-scan base-package="com.study"></context:component-scan>
    <!--自动代理 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>


    <!--配置自动代理: 自动扫描所有切面类, 并为其生成代理-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

    <!-- 切面定义-->
    <bean id="checktime" class="com.study.CheckNowTime"></bean>
    <aop:config>
        <aop:aspect ref="checktime">
            <aop:pointcut id="dohomework" expression="execution(* *.doHomeWork(..))"/>
            <aop:before pointcut-ref="dohomework" method="beforeDoHomework"></aop:before>
        </aop:aspect>
    </aop:config>

    <!-- 1、datasource -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://47.114.94.33:3306/nacos"></property>
        <property name="user" value="root"></property>
        <property name="password" value="qingshi@123"></property>
    </bean>

    <!-- 2、dao  -->
    <bean id="accountDao" class="com.study.dao.impl.AccountDaoImpl">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 3、service -->
    <bean id="accountService" class="com.study.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>

    <!-- 4、service 代理对象
        4.1 proxyInterfaces 接口
        4.2 target 目标类
        4.3 transactionManager 事务管理器
        4.4 transactionAttributes 事务属性（事务详情）
            prop.key ：确定哪些方法使用当前事务配置
            prop.text:用于配置事务详情
                格式：PROPAGATION，ISOLATION，readOnly，-Exception，+Exception
                    传播行为		隔离级别		是否只读		异常回滚		异常提交
                例如：
                    <prop key="transfer">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop> 默认传播行为，和隔离级别
                    <prop key="transfer">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</prop> 只读
                    <prop key="transfer">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,+java.lang.ArithmeticException</prop>  有异常扔提交
    -->
    <!-- 4、事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 5、将事务管理器交予Spring -->
    <tx:annotation-driven transaction-manager="txManager"/>

    <bean id="userId" class="com.study.domain.User"></bean>

</beans>